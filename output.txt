R:	<Opt Function Definitions> =>	   <Empty>
Token: Operator                Lexeme: %%
R:	<Opt Declaration List>     =>	   <Empty>
Token: Keyword                 Lexeme: while
Token: Separator               Lexeme: (
Token: Identifier              Lexeme: low
R:	<Primary>                  =>	   <Identifier>
R:	<Factor>                   =>	   <Primary>
R:	<Term>                     
R:	<Expression>               
Token: Operator                Lexeme: <
R:	<Relop>                    
Token: Identifier              Lexeme: high
R:	<Primary>                  =>	   <Identifier>
R:	<Factor>                   =>	   <Primary>
R:	<Term>                     
R:	<Expression>               
R:	<Condition>                =>	   <Expression> <Relop> <Expression>
Token: Separator               Lexeme: )
Token: Separator               Lexeme: {
Token: Keyword                 Lexeme: while
Token: Separator               Lexeme: (
Token: Identifier              Lexeme: a
R:	<Primary>                  =>	   <Identifier>
R:	<Factor>                   =>	   <Primary>
R:	<Term>                     
R:	<Expression>               
Token: Operator                Lexeme: >
R:	<Relop>                    
Token: Integer                 Lexeme: 2
R:	<Primary>                  =>	   <Integer>
R:	<Factor>                   =>	   <Primary>
R:	<Term>                     
R:	<Expression>               
R:	<Condition>                =>	   <Expression> <Relop> <Expression>
Token: Separator               Lexeme: )
Token: Separator               Lexeme: {
Token: Identifier              Lexeme: low
Token: Operator                Lexeme: :=
Token: Identifier              Lexeme: low
R:	<Primary>                  =>	   <Identifier>
R:	<Factor>                   =>	   <Primary>
R:	<Term>                     
Token: Operator                Lexeme: +
Token: Identifier              Lexeme: step#xy
R:	<Primary>                  =>	   <Identifier>
R:	<Factor>                   =>	   <Primary>
R:	<Term>                     
R:	<Expression>               
Token: Separator               Lexeme: ;
R:	<Assign>                   =>	   <Identifier> := <Expression> ;
R:	<Statement>                =>	   <Assign>
R:	<Statement List>           =>	   <Statement>  |  <Statement> <Statement List>
Token: Separator               Lexeme: }
R:	<Compound>                 =>	   { <Statement List> }
R:	<Statement>                =>	   <Compound>
R:	<While>                    =>	   while ( <Condition> ) <Statement>
R:	<Statement>                =>	   <While>
R:	<Statement List>           =>	   <Statement>  |  <Statement> <Statement List>
Token: Separator               Lexeme: }
R:	<Compound>                 =>	   { <Statement List> }
R:	<Statement>                =>	   <Compound>
R:	<While>                    =>	   while ( <Condition> ) <Statement>
R:	<Statement>                =>	   <While>
R:	<Statement List>           =>	   <Statement>  |  <Statement> <Statement List>
R:	<Rat17f>                   =>	   <Opt Function Definitions> %% <Opt Declaration List> <Statement List>
