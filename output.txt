Token: Operator                Lexeme: @
Token: Identifier              Lexeme: convert
Token: Separator               Lexeme: (
Token: Identifier              Lexeme: fahr
R:	<IDs>                      
Token: Separator               Lexeme: :
Token: Keyword                 Lexeme: integer
R:	<Qualifier>                =>	   <integer>
R:	<Parameter>                =>	   <IDs> : <Qualifier>
R:	<Parameter List>           =>	   <Parameter> | <Parameter>, <Parameter List>
R:	<Opt Parameter List>       =>	   <Parameter List>
Token: Separator               Lexeme: )
R:	<Opt Declaration List>     =>	   <Empty>
Token: Separator               Lexeme: {
Token: Keyword                 Lexeme: return
Token: Integer                 Lexeme: 5
R:	<Primary>                  =>	   <Integer>
R:	<Factor>                   =>	   <Primary>
Token: Operator                Lexeme: *
Token: Separator               Lexeme: (
Token: Identifier              Lexeme: fahr
R:	<Primary>                  =>	   <Identifier>
R:	<Factor>                   =>	   <Primary>
R:	<Term>                     
Token: Operator                Lexeme: -
Token: Integer                 Lexeme: 32
R:	<Primary>                  =>	   <Integer>
R:	<Factor>                   =>	   <Primary>
R:	<Term>                     
R:	<Expression>               
Token: Separator               Lexeme: )
R:	<Primary>                  =>	   ( <Expression> )
R:	<Factor>                   =>	   <Primary>
Token: Operator                Lexeme: /
Token: Integer                 Lexeme: 9
R:	<Primary>                  =>	   <Integer>
R:	<Factor>                   =>	   <Primary>
R:	<Term>                     
R:	<Expression>               
Token: Separator               Lexeme: ;
R:	<Return>                   =>	   return <Expression> ;
R:	<Statement>                =>	   <Return>
R:	<Statement List>           =>	   <Statement>  |  <Statement> <Statement List>
Token: Separator               Lexeme: }
R:	<Body>                     =>	   { <Statement List> }
R:	<Function>                 =>	   @ <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>
R:	<Function Definitions>     =>	   <Function> | <Function> <Function Definitions>
R:	<Opt Function Definitions> =>	   <Function Definitions>
Token: Operator                Lexeme: %%
Token: Keyword                 Lexeme: integer
R:	<Qualifier>                =>	   <integer>
Token: Identifier              Lexeme: low
Token: Separator               Lexeme: ,
Token: Identifier              Lexeme: high
Token: Separator               Lexeme: ,
Token: Identifier              Lexeme: step#xy
R:	<IDs>                      
R:	<Declaration>              =>	   <Qualifier> <IDs>
Token: Separator               Lexeme: ;
R:	<Declaration List>         =>	   <Declaration>; | <Declaration>; <Declaration List>
R:	<Opt Declaration List>     =>	   <Declaration List>
Token: Keyword                 Lexeme: read
Token: Separator               Lexeme: (
Token: Identifier              Lexeme: low
Token: Separator               Lexeme: ,
Token: Identifier              Lexeme: high
Token: Separator               Lexeme: ,
Token: Identifier              Lexeme: step#xy
R:	<IDs>                      
Token: Separator               Lexeme: )
Token: Separator               Lexeme: ;
R:	<Read>                     =>	   read ( <IDs> );
R:	<Statement>                =>	   <Read>
Token: Keyword                 Lexeme: while
Token: Separator               Lexeme: (
Token: Identifier              Lexeme: low
R:	<Primary>                  =>	   <Identifier>
R:	<Factor>                   =>	   <Primary>
R:	<Term>                     
R:	<Expression>               
Token: Operator                Lexeme: <
R:	<Relop>                    
Token: Identifier              Lexeme: high
R:	<Primary>                  =>	   <Identifier>
R:	<Factor>                   =>	   <Primary>
R:	<Term>                     
R:	<Expression>               
R:	<Condition>                =>	   <Expression> <Relop> <Expression>
Token: Separator               Lexeme: )
Token: Separator               Lexeme: {
Token: Keyword                 Lexeme: write
Token: Separator               Lexeme: (
Token: Identifier              Lexeme: low
R:	<Primary>                  =>	   <Identifier>
R:	<Factor>                   =>	   <Primary>
R:	<Term>                     
R:	<Expression>               
Token: Separator               Lexeme: )
Token: Separator               Lexeme: ;
R:	<Write>                    =>	   write ( <Expression>);
R:	<Statement>                =>	   <Write>
Token: Keyword                 Lexeme: write
Token: Separator               Lexeme: (
Token: Identifier              Lexeme: convert
Token: Separator               Lexeme: [
Token: Identifier              Lexeme: low
R:	<IDs>                      
Token: Separator               Lexeme: ]
R:	<Primary>                  =>	   <Identifier> [<IDs>]
R:	<Factor>                   =>	   <Primary>
R:	<Term>                     
R:	<Expression>               
Token: Separator               Lexeme: )
Token: Separator               Lexeme: ;
R:	<Write>                    =>	   write ( <Expression>);
R:	<Statement>                =>	   <Write>
Token: Identifier              Lexeme: low
Token: Operator                Lexeme: :=
Token: Identifier              Lexeme: low
R:	<Primary>                  =>	   <Identifier>
R:	<Factor>                   =>	   <Primary>
R:	<Term>                     
Token: Operator                Lexeme: +
Token: Identifier              Lexeme: step#xy
R:	<Primary>                  =>	   <Identifier>
R:	<Factor>                   =>	   <Primary>
R:	<Term>                     
R:	<Expression>               
Token: Separator               Lexeme: ;
R:	<Assign>                   =>	   <Identifier> := <Expression> ;
R:	<Statement>                =>	   <Assign>
R:	<Statement List>           =>	   <Statement>  |  <Statement> <Statement List>
ERROR: Line 13	In function compound()-- 
	Received: ;  
	Expected: }
ERROR: Line 13	In function _while()-- 
	Received: ;  
	Expected: <Statement>
R:	<Statement List>           =>	   <Statement>  |  <Statement> <Statement List>
R:	<Rat17f>                   =>	   <Opt Function Definitions> %% <Opt Declaration List> <Statement List>
