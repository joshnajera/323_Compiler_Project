R:	<Opt Function Definitions> =>	   <Empty>
Token: Operator                Lexeme: %%
Token: Keyword                 Lexeme: integer
R:	<Qualifier>                =>	   <integer>
Token: Identifier              Lexeme: hello
Token: Separator               Lexeme: ,
Token: Identifier              Lexeme: world
Token: Separator               Lexeme: ,
Token: Identifier              Lexeme: x
R:	<IDs>                      
R:	<Declaration>              =>	   <Qualifier> <IDs>
Token: Separator               Lexeme: ;
R:	<Declaration List>         =>	   <Declaration>; | <Declaration>; <Declaration List>
R:	<Opt Declaration List>     =>	   <Declaration List>
Token: Keyword                 Lexeme: if
Token: Separator               Lexeme: (
Token: Identifier              Lexeme: x
R:	<Primary>                  =>	   <Identifier>
R:	<Factor>                   =>	   <Primary>
R:	<Term>                     
R:	<Expression>               
Token: Operator                Lexeme: <
R:	<Relop>                    
Token: Identifier              Lexeme: x
R:	<Primary>                  =>	   <Identifier>
R:	<Factor>                   =>	   <Primary>
R:	<Term>                     
R:	<Expression>               
R:	<Condition>                =>	   <Expression> <Relop> <Expression>
Token: Separator               Lexeme: )
Token: Identifier              Lexeme: hello
Token: Operator                Lexeme: :=
Token: Operator                Lexeme: -
Token: Separator               Lexeme: (
Token: Identifier              Lexeme: world
R:	<Primary>                  =>	   <Identifier>
R:	<Factor>                   =>	   <Primary>
R:	<Term>                     
Token: Operator                Lexeme: +
Token: Integer                 Lexeme: 1
R:	<Primary>                  =>	   <Integer>
R:	<Factor>                   =>	   <Primary>
R:	<Term>                     
R:	<Expression>               
Token: Separator               Lexeme: )
R:	<Primary>                  =>	   ( <Expression> )
R:	<Factor>                   =>	   -<Primary>
R:	<Term>                     
R:	<Expression>               
Token: Separator               Lexeme: ;
R:	<Assign>                   =>	   <Identifier> := <Expression> ;
R:	<Statement>                =>	   <Assign>
Token: Keyword                 Lexeme: else
Token: Identifier              Lexeme: world
Token: Operator                Lexeme: :=
Token: Integer                 Lexeme: 3
R:	<Primary>                  =>	   <Integer>
R:	<Factor>                   =>	   <Primary>
R:	<Term>                     
R:	<Expression>               
Token: Separator               Lexeme: ;
R:	<Assign>                   =>	   <Identifier> := <Expression> ;
R:	<Statement>                =>	   <Assign>
Token: Keyword                 Lexeme: fi
R:	<If>                       =>	   if ( <Condition>  ) <Statement> else <Statement> fi
R:	<Statement>                =>	   <If>
R:	<Statement List>           =>	   <Statement>  |  <Statement> <Statement List>
R:	<Rat17f>                   =>	   <Opt Function Definitions> %% <Opt Declaration List> <Statement List>
